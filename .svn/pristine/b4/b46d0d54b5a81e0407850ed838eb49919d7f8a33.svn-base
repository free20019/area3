package com.tw.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import org.apache.struts2.ServletActionContext;

import com.opensymphony.xwork2.Action;
import com.tw.action.DelAllFile;
import com.tw.dao.AreaDao;
import com.tw.dao.HalfMonthDao;
import com.tw.entity.Area;
import com.tw.entity.HalfMonth;
import com.tw.entity.LOADONLINE;

public class findAreaAction implements Action{
	private String stime;
	private String etime;
	private Integer speed;
	private String xlsfilename;
	private String fanhuei;
	private String action;
	private String quyu;
	private String time;
	private String id;
	private HalfMonth halfMonth =new HalfMonth();
	private HalfMonthDao h=new HalfMonthDao();
	private Area area=new Area();
	private List<Area>cs=new ArrayList<Area>();
	private List<Area> list=new ArrayList<Area>();
	AreaDao a=new AreaDao();
	public String area(){
		list=a.findAreas();
		return SUCCESS;
	}
	public String findarea(){
		AreaDao a=new AreaDao();
		List<List<Area>>hn=new ArrayList<List<Area>>();
		for (int i = 0; i < 6; i++) {
			list=a.findarea(quyu,time, i);
			hn.add(i, list);
		}
		area.setJg(hn);
		cs=a.findaverage(quyu,time);
		halfMonth=h.findmaxmin(quyu, time);
		return SUCCESS;
	}
	public String findareaexcle(){
		AreaDao a=new AreaDao();
		List<List<Area>>hn=new ArrayList<List<Area>>();
		for (int i = 0; i < 6; i++) {
			list=a.findarea(quyu,time, i);
			hn.add(i, list);
		}
		area.setJg(hn);
		cs=a.findaverage(quyu,time);
		halfMonth=h.findmaxmin(quyu, time);
			try{
				Date date = new Date();
				String logfile=ServletActionContext.getServletContext().getRealPath("/");
			String dateStr2 = new Timestamp(date.getTime()).toString();
				String MV_VERSION="";
				MV_VERSION=MV_VERSION+dateStr2.substring(0,4);
				MV_VERSION=MV_VERSION+dateStr2.substring(5,7);
				MV_VERSION=MV_VERSION+dateStr2.substring(8,10);
				MV_VERSION=MV_VERSION+dateStr2.substring(11,13);
				MV_VERSION=MV_VERSION+dateStr2.substring(14,16);
				MV_VERSION=MV_VERSION+dateStr2.substring(17,19);
				logfile=logfile+"count\\";
				File file1 = new File(logfile);//创建文件夹
				if (!file1.exists()) {
					file1.mkdir();
					//System.err.println(file + " 文件夹已创建！");
				}
				DelAllFile d=new DelAllFile();
				d.delAllFile(logfile);
				File file= new File(logfile+""+MV_VERSION+".xls"); 
				this.xlsfilename=""+MV_VERSION+".xls";
				//this.xlsfilepath="//evaluation//"+xlsfilename;
				file.createNewFile(); //建立要输出的文件 

				OutputStream os = new FileOutputStream(file);//使用文件缓冲 

				WritableWorkbook wwb = Workbook.createWorkbook(os);//取EXCEL操作实例 

				WritableSheet ws = wwb.createSheet("监控点车辆分析",0);//创建Excel工作表 指定名称和位置 
				Label label ;
            	label = new Label(0,0,"区域"); 
            	ws.addCell(label);
            	label = new Label(1,0,"00:00"); 
            	ws.addCell(label);
            	label = new Label(2,0,"00:30"); 
            	ws.addCell(label);
            	label = new Label(3,0,"01:00"); 
            	ws.addCell(label);
            	label = new Label(4,0,"01:30"); 
            	ws.addCell(label);
            	label = new Label(5,0,"02:00"); 
            	ws.addCell(label);
            	label = new Label(6,0,"02:30"); 
            	ws.addCell(label);
            	label = new Label(7,0,"03:00"); 
            	ws.addCell(label);
            	label = new Label(8,0,"03:30"); 
            	ws.addCell(label);
            	label = new Label(9,0,"04:00"); 
            	ws.addCell(label);
            	label = new Label(10,0,"04:30"); 
            	ws.addCell(label);
            	label = new Label(11,0,"05:00"); 
            	ws.addCell(label);
            	label = new Label(12,0,"05:30"); 
            	ws.addCell(label);
            	label = new Label(13,0,"06:00"); 
            	ws.addCell(label);
            	label = new Label(14,0,"06:30"); 
            	ws.addCell(label);
            	label = new Label(15,0,"07:00"); 
            	ws.addCell(label);
            	label = new Label(16,0,"07:30"); 
            	ws.addCell(label);
            	label = new Label(17,0,"08:00"); 
            	ws.addCell(label);
            	label = new Label(18,0,"08:30"); 
            	ws.addCell(label);
            	label = new Label(19,0,"09:00"); 
            	ws.addCell(label);
            	label = new Label(20,0,"09:30"); 
            	ws.addCell(label);
            	label = new Label(21,0,"10:00"); 
            	ws.addCell(label);
            	label = new Label(22,0,"10:30"); 
            	ws.addCell(label);
            	label = new Label(23,0,"11:00"); 
            	ws.addCell(label);
            	label = new Label(24,0,"11:30"); 
            	ws.addCell(label);
            	label = new Label(25,0,"12:00"); 
            	ws.addCell(label);
            	label = new Label(26,0,"12:30"); 
            	ws.addCell(label);
            	label = new Label(27,0,"13:00"); 
            	ws.addCell(label);
            	label = new Label(28,0,"13:30"); 
            	ws.addCell(label);
            	label = new Label(29,0,"14:00"); 
            	ws.addCell(label);
            	label = new Label(30,0,"14:30"); 
            	ws.addCell(label);
            	label = new Label(31,0,"15:00"); 
            	ws.addCell(label);
            	label = new Label(32,0,"15:30"); 
            	ws.addCell(label);
            	label = new Label(33,0,"16:00"); 
            	ws.addCell(label);
            	label = new Label(34,0,"16:30"); 
            	ws.addCell(label);
            	label = new Label(35,0,"17:00"); 
            	ws.addCell(label);
            	label = new Label(36,0,"17:30"); 
            	ws.addCell(label);
            	label = new Label(37,0,"18:00"); 
            	ws.addCell(label);
            	label = new Label(38,0,"18:30"); 
            	ws.addCell(label);
            	label = new Label(39,0,"19:00"); 
            	ws.addCell(label);
            	label = new Label(40,0,"19:30"); 
            	ws.addCell(label);
            	label = new Label(41,0,"20:00"); 
            	ws.addCell(label);
            	label = new Label(42,0,"20:30"); 
            	ws.addCell(label);
            	label = new Label(43,0,"21:00"); 
            	ws.addCell(label);
            	label = new Label(44,0,"21:30"); 
            	ws.addCell(label);
            	label = new Label(45,0,"22:00"); 
            	ws.addCell(label);
            	label = new Label(46,0,"22:30"); 
            	ws.addCell(label);
            	label = new Label(47,0,"23:00"); 
            	ws.addCell(label);
            	label = new Label(48,0,"23:30"); 
            	ws.addCell(label);
            	label = new Label(0,1,"今天"); 
            	ws.addCell(label);
            	label = new Label(0,2,"昨天"); 
            	ws.addCell(label);
            	label = new Label(0,3,"前天"); 
            	ws.addCell(label);
            	label = new Label(0,4,"上周"); 
            	ws.addCell(label);
            	label = new Label(0,5,"上周平均"); 
            	ws.addCell(label);
            	label = new Label(0,6,"前半月最大"); 
            	ws.addCell(label);
            	label = new Label(0,7,"前半月最小"); 
            	ws.addCell(label);
            	label = new Label(0,8,"上月"); 
            	ws.addCell(label);
            	label = new Label(0,9,"上年"); 
            	ws.addCell(label);
            	List<String>shangnian=area.getJg().get(0).get(0).getAll();
            	for (int i = 0; i < shangnian.size(); i++) {
                	label = new Label(i+1,9,shangnian.get(i)); 
                	ws.addCell(label);
				}
            	List<String >shangyue=area.getJg().get(1).get(0).getAll();
            	for (int i = 0; i < shangyue.size(); i++) {
                	label = new Label(i+1,8,shangyue.get(i)); 
                	ws.addCell(label);
				}
            	String[] min=halfMonth.getAreavhicmin();
            	for (int i = 0; i < min.length; i++) {
					label=new Label(i+1,7,min[i]);
					ws.addCell(label);
				}
            	String[] max=halfMonth.getAreavhicmax();
            	for (int i = 0; i < max.length; i++) {
					label=new Label(i+1,6,max[i]);
					ws.addCell(label);
				}
            	List<String>shangzhou=area.getJg().get(2).get(0).getAll();
            	for (int i = 0; i < shangzhou.size(); i++) {
                	label = new Label(i+1,4,shangzhou.get(i)); 
                	ws.addCell(label);
				}
            	List<String>qiantian=area.getJg().get(3).get(0).getAll();
            	for (int i = 0; i < qiantian.size(); i++) {
                	label = new Label(i+1,3,qiantian.get(i)); 
                	ws.addCell(label);
				}
            	List<String>zuotian=area.getJg().get(4).get(0).getAll();
            	for (int i = 0; i < zuotian.size(); i++) {
                	label = new Label(i+1,2,zuotian.get(i)); 
                	ws.addCell(label);
				}
            	List<String>jintian=area.getJg().get(5).get(0).getAll();
            	for (int i = 0; i < jintian.size(); i++) {
                	label = new Label(i+1,1,jintian.get(i)); 
                	ws.addCell(label);
				}
            	List<String>pingjun=cs.get(0).getSj();
            	for (int i = 0; i < pingjun.size(); i++) {
                	label = new Label(i+1,5,pingjun.get(i)); 
                	ws.addCell(label);
				}
                wwb.write();//写入文件 
				wwb.close();
				os.close();
				this.fanhuei="成功导成Excel!";
				this.action="filedownload.action?inputPath="+this.xlsfilename;
			}catch(Exception e){
				this.fanhuei="导出失败!";
			}
		
		return SUCCESS;
	}
	public String getXlsfilename() {
		return xlsfilename;
	}
	public void setXlsfilename(String xlsfilename) {
		this.xlsfilename = xlsfilename;
	}
	public String getFanhuei() {
		return fanhuei;
	}
	public void setFanhuei(String fanhuei) {
		this.fanhuei = fanhuei;
	}
	public String getAction() {
		return action;
	}
	public void setAction(String action) {
		this.action = action;
	}
	public String getStime() {
		return stime;
	}
	public void setStime(String stime) {
		this.stime = stime;
	}
	public String getEtime() {
		return etime;
	}
	public void setEtime(String etime) {
		this.etime = etime;
	}
	public List<Area> getCs() {
		return cs;
	}
	public void setCs(List<Area> cs) {
		this.cs = cs;
	}
	public Area getArea() {
		return area;
	}
	public void setArea(Area area) {
		this.area = area;
	}
	public Integer getSpeed() {
		return speed;
	}
	public void setSpeed(Integer speed) {
		this.speed = speed;
	}
	public String execute() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
	public List<Area> getList() {
		return list;
	}
	public void setList(List<Area> list) {
		this.list = list;
	}
	public String getQuyu() {
		return quyu;
	}
	public void setQuyu(String quyu) {
		this.quyu = quyu;
	}
	public AreaDao getA() {
		return a;
	}
	public void setA(AreaDao a) {
		this.a = a;
	}
	public String getTime() {
		return time;
	}
	public void setTime(String time) {
		this.time = time;
	}
	public HalfMonth getHalfMonth() {
		return halfMonth;
	}
	public void setHalfMonth(HalfMonth halfMonth) {
		this.halfMonth = halfMonth;
	}
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public HalfMonthDao getH() {
		return h;
	}
	public void setH(HalfMonthDao h) {
		this.h = h;
	}
	
}
